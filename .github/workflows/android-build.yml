name: Android Signed Build

# This is a reusable workflow for Docker builds and AWS deployments
on:
  workflow_call:
    inputs:
      ENVIRONMENT:
        description: 'Environment'
        required: true
        type: string
    secrets:
      SIGNING_KEY_ALIAS:
        description: 'Signing key alias'
        required: true
      SIGNING_KEY_PASSWORD:
        description: 'Signing key password'
        required: true
      SIGNING_STORE_PASSWORD:
        description: 'Signing store password'
        required: true
      KEYSTORE_BASE64:
        description: 'Keystore base64'
        required: true

jobs:
  android-build:
    environment:
      name: ${{ inputs.ENVIRONMENT }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle
          
      - name: Setup Android SDK
        uses: android-actions/setup-android@v2
        
      # - name: Setup Build Cache
      #   uses: actions/cache@v3
      #   with:
      #     path: |
      #       .gradle/build-cache
      #       app/build/intermediates
      #     key: ${{ runner.os }}-gradle-build-${{ hashFiles('**/*.gradle*') }}
      #     restore-keys: |
      #       ${{ runner.os }}-gradle-build-
        
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Create local.properties
        run: echo "sdk.dir=$ANDROID_HOME" > local.properties

      - name: Decode Keystore
        run: |
          mkdir -p keystore
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > keystore/release.keystore

      - name: Clean build
        run: ./gradlew clean --no-daemon
        
      - name: Set capitalized flavor name
        id: set-flavor
        run: |
          FLAVOR="${{ vars.APK_FLAVOUR }}"
          CAPITALIZED_FLAVOR="$(echo ${FLAVOR:0:1} | tr '[:lower:]' '[:upper:]')${FLAVOR:1}"
          echo "CAPITALIZED_FLAVOR=$CAPITALIZED_FLAVOR" >> $GITHUB_OUTPUT
          echo "Using flavor: $CAPITALIZED_FLAVOR"
      
      - name: Generate Safe Args
        run: ./gradlew generateSafeArgs${{ steps.set-flavor.outputs.CAPITALIZED_FLAVOR }}Release --no-daemon

      - name: Build Signed APK & AAB
        env:
          SIGNING_KEY_ALIAS: ${{ secrets.SIGNING_KEY_ALIAS }}
          SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}
          SIGNING_STORE_PASSWORD: ${{ secrets.SIGNING_STORE_PASSWORD }}
        run: |
          ./gradlew assemble${{ steps.set-flavor.outputs.CAPITALIZED_FLAVOR }}Release bundle${{ steps.set-flavor.outputs.CAPITALIZED_FLAVOR }}Release \
            -Pandroid.injected.signing.store.file=$(pwd)/keystore/release.keystore \
            -Pandroid.injected.signing.store.password=$SIGNING_STORE_PASSWORD \
            -Pandroid.injected.signing.key.alias=$SIGNING_KEY_ALIAS \
            -Pandroid.injected.signing.key.password=$SIGNING_KEY_PASSWORD \
            --stacktrace --info

      - name: Prepare artifacts
        id: prepare-artifacts
        run: |
          mkdir -p artifacts-output
          
          # Find and copy APK and AAB
          APK_PATH=$(find app/build/outputs/apk/${{ vars.APK_FLAVOUR }}/release -name '*.apk' | head -n 1)
          AAB_PATH=$(find app/build/outputs/bundle/${{ vars.APK_FLAVOUR }}Release -name '*.aab' | head -n 1)
              
          if [ -z "$APK_PATH" ]; then
            echo "::error::No se encontró ningún APK generado"
            exit 1
          fi
          
          cp "$APK_PATH" artifacts-output/
          APK_FILENAME=$(basename "$APK_PATH")
          echo "apk_path=artifacts-output/$APK_FILENAME" >> $GITHUB_OUTPUT
          echo "apk_name=$APK_FILENAME" >> $GITHUB_OUTPUT
          echo "APK generado: $APK_FILENAME"
          
          # Copy AAB
          if [ -z "$AAB_PATH" ]; then
            echo "::error::No se encontró ningún AAB generado"
            exit 1
          fi
          cp "$AAB_PATH" artifacts-output/
          AAB_FILENAME=$(basename "$AAB_PATH")
          echo "aab_path=artifacts-output/$AAB_FILENAME" >> $GITHUB_OUTPUT
          echo "aab_name=$AAB_FILENAME" >> $GITHUB_OUTPUT
          echo "AAB generado: $AAB_FILENAME"
          
          ls -la artifacts-output/
      
      - name: Upload APK as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ vars.APK_NAME }}-${{ inputs.ENVIRONMENT }}-Release-${{ github.run_number }}
          path: ${{ steps.prepare-artifacts.outputs.apk_path }}
          retention-days: 90
          if-no-files-found: error
          
      - name: Configure AWS credentials for QA distribution with OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.ITROCK_AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ vars.ITROCK_AWS_REGION }}

      - name: Upload APK to S3
        id: s3-upload
        run: |
          APK_FILENAME=$(basename "${{ steps.prepare-artifacts.outputs.apk_path }}")
          
          # Replace '(' with '-' and remove ')'
          SAFE_FILENAME=${APK_FILENAME//\(/-}
          SAFE_FILENAME=${SAFE_FILENAME//\)/}
          
          S3_PATH="s3://${{ vars.ITROCK_AWS_APKS_BUCKET_NAME }}/${{ vars.APK_NAME }}/${{ inputs.ENVIRONMENT }}/$SAFE_FILENAME"
          
          aws s3 cp "${{ steps.prepare-artifacts.outputs.apk_path }}" "$S3_PATH"
          
          # Construct CloudFront URL instead of generating presigned URL
          CLOUDFRONT_PATH="${{ vars.APK_NAME }}/${{ inputs.ENVIRONMENT }}/$SAFE_FILENAME"
          DOWNLOAD_URL="${{ vars.ITROCK_APKS_DISTRIBUTION_URL }}/$CLOUDFRONT_PATH"
          echo "download_url=$DOWNLOAD_URL" >> $GITHUB_OUTPUT
          echo "apk_filename=$APK_FILENAME" >> $GITHUB_OUTPUT

      - name: Send APK Link to Slack
        if: ${{ steps.s3-upload.outcome == 'success' }}
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload: |
            {
              "text": "Nueva versión de ${{ vars.APK_NAME }} ${{ inputs.ENVIRONMENT }}",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "Nueva versión de ${{ vars.APK_NAME }} ${{ inputs.ENVIRONMENT }}",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*App:*\n${{ vars.APK_NAME }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Ambiente:*\n${{ inputs.ENVIRONMENT }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Build:*\n#${{ github.run_number }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*APK:*\n${{ steps.s3-upload.outputs.apk_filename }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Url:*\n${{ steps.s3-upload.outputs.download_url }}"
                    }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "Descargar APK",
                        "emoji": true
                      },
                      "url": "${{ steps.s3-upload.outputs.download_url }}",
                      "style": "primary"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ vars.ITROCK_APKS_SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
      - name: Upload AAB as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ vars.APK_NAME }}-${{ inputs.ENVIRONMENT }}-Release-Bundle-${{ github.run_number }}
          path: ${{ steps.prepare-artifacts.outputs.aab_path }}
          retention-days: 90
          if-no-files-found: error