name: ECS AWS Deployment

# This is a reusable workflow for Docker builds and AWS deployments
on:
  workflow_call:
    inputs:
      ENVIRONMENT:
        description: 'Environment'
        required: true
        type: string
      AWS_ROLE_TO_ASSUME:
        description: 'AWS role to assume for OIDC'
        required: true
        type: string
      AWS_REGION:
        description: 'AWS region'
        required: true
        type: string
      DOPPLER_DOWNLOAD_SECRETS:
        description: 'Download Doppler secrets'
        required: false
        default: false  
        type: boolean
      VERSION_VARIABLE_NAME:
        description: 'Version variable name'
        required: false
        default: 'APP_VERSION'
        type: string
      DOCKER_BUILD_ARGS:
        description: 'Docker build arguments (format: VAR=value)'
        required: false
        type: string
    secrets:
      DOPPLER_TOKEN:
        description: 'Doppler token'
        required: false

jobs:
  aws-ecs-deploy:
    environment:
      name: ${{ inputs.ENVIRONMENT }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ inputs.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ inputs.AWS_REGION }}
          role-session-name: ${{ github.event.repository.name }}-ci
          
      - name: Install Doppler CLI
        if: ${{ inputs.DOPPLER_DOWNLOAD_SECRETS }}
        uses: dopplerhq/cli-action@v2
      - name: Download secrets from Doppler
        if: ${{ inputs.DOPPLER_DOWNLOAD_SECRETS }}
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}
          DOPPLER_CONFIG: ${{ vars.DOPPLER_CONFIG }}
          DOPPLER_PROJECT: ${{ vars.DOPPLER_PROJECT }}
        run: doppler secrets download --no-file --format env > .env
      - name: Add version to .env file
        run: |
          echo "${{ inputs.VERSION_VARIABLE_NAME }}=1.1.${{ github.run_number }}" >> .env
          
      - name: Login to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2
        
      - name: Set up Docker build args
        id: build-args
        run: |
          # Initialize build args with default
          ARGS="uid=1000"
          
          # Add any custom build arguments provided
          if [ -n "${{ inputs.DOCKER_BUILD_ARGS }}" ]; then
            while IFS= read -r line; do
              # Skip empty lines
              if [ -n "$line" ]; then
                ARGS="$ARGS,$line"
              fi
            done <<< "${{ inputs.DOCKER_BUILD_ARGS }}"
          fi
          
          echo "args=$ARGS" >> $GITHUB_OUTPUT
        
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ vars.ECR_URL }}/${{ vars.ECR_REPOSITORY }}:latest
            ${{ vars.ECR_URL }}/${{ vars.ECR_REPOSITORY }}:${{ github.run_number }}
          build-args: |
            ${{ steps.build-args.outputs.args }}
          cache-from: |
            type=registry,ref=${{ vars.ECR_URL }}/${{ vars.ECR_REPOSITORY }}:buildcache
            type=gha,scope=${{ github.workflow }}
          cache-to: |
            type=registry,ref=${{ vars.ECR_URL }}/${{ vars.ECR_REPOSITORY }}:buildcache,mode=max
            type=gha,scope=${{ github.workflow }},mode=max
          
      - name: Update ECS service
        run: |
          aws ecs update-service --cluster ${{ vars.ECS_CLUSTER_NAME }} --service ${{ vars.ECS_SERVICE_NAME }} --force-new-deployment --region ${{ inputs.AWS_REGION }}
